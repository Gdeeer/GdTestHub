apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply from: 'configTest.gradle'

ext {
    myName = "zhangjl"
}

task showMyName(group: "gdeer") {
    println "cur myName is $myName"
    doLast {
        // myName 会在 mylib 中被修改
        println "cur myName is $myName"
    }
}

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.gdeer.gdtesthub"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
}

configurations {
    // 自定义 configuration
    // implementation 会继承 gdConfiguration 声明的依赖
    // 使用 gdConfiguration 与使用 implementation 效果一致，可正常编译
    implementation.extendsFrom(gdConfiguration)


    // compileClasspath 会继承 gdConfiguration2 声明的依赖
    // 但 gdConfiguration2 声明的依赖无法正常使用
    // 因为 android 插件里没有 compileClasspath 这个 configuration
    // 这样的配置只是配置了 compileClasspath、gdConfiguration2 两个全新的 configuration
    compileClasspath.extendsFrom(gdConfiguration2)

    jasper
}

configurations.all {
    resolutionStrategy {
        force 'io.reactivex.rxjava2:rxandroid:2.1.1',
                'io.reactivex.rxjava2:rxjava:2.2.13',
                'android.arch.lifecycle:runtime:1.0.3'
    }
}

dependencies {
    // 使用自定义 configuration: gdConfiguration
    // mylib 中的类可以在 app 中正常访问
    gdConfiguration project(":mylib")

    // 使用自定义 configuration: gdConfiguration
    // mylib 中的类不能在 app 中访问到
    // gdConfiguration2 project(":mylib")

    // 使用自定义 configuration: jasper
    jasper 'com.github.bumptech.glide:glide:4.9.0'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:2.0.0-beta4'
    //implementation 'org.litepal.android:java:3.0.0'
    def room_version = "1.1.1"
    implementation "android.arch.persistence.room:runtime:$room_version"
    implementation 'android.arch.lifecycle:extensions:1.1.1'
    implementation 'com.android.support:support-v4:28.0.0'
    annotationProcessor "android.arch.persistence.room:compiler:$room_version"
    // For Kotlin use kapt instead of annotationProcessor
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation project(':annotation')
    annotationProcessor project(':processor')

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.0'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.0'
    implementation 'com.github.akarnokd:rxjava2-extensions:0.20.10'

    implementation 'com.android.support:design:28.0.0'

    implementation 'com.jakewharton:butterknife:9.0.0'
    annotationProcessor 'com.jakewharton:butterknife-compiler:9.0.0'

    // Enhanced RecyclerView adapter library
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.46'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.github.bumptech.glide:glide:4.9.0'

    // 解除 P 上的 private api 访问限制
    implementation('me.weishu:free_reflection:2.2.0') {
        // Gradle 4.6 后支持，用于说明用途，可在 dependencies 分析报告中展示
        because "We use it to access the private API on P"
    }
}

task preCompileJasper {
    doLast {
        // 调用 asPath 会去 resolve 声明的依赖，并返回 resolve 后的本地地址
        println("configurations.jasper.asPath: ${configurations.jasper.asPath}")
    }
}

apply plugin: 'com.geektime.systrace-plugin'
systrace {
    enable = true
    baseMethodMapFile = "${project.buildDir}/systrace_output/Debug.methodmap"
    blackListFile = "${project.projectDir}/blacklist/blackMethodList.txt"
}
