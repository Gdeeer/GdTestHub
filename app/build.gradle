apply plugin: 'com.android.application'
apply plugin: 'com.jakewharton.butterknife'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply from: '../gradleScript/configTest.gradle'
apply from: '../gradleScript/incrementalTest.gradle'
apply from: '../gradleScript/someTest.gradle'
apply plugin: LifecyclePlugin
apply from: '../gradleScript/include.gradle'

ext {
    myName = "zhangjl"
}

task showMyName(group: "gdeer") {
    println "cur myName is $myName"
    doLast {
        // myName 会在 mylib 中被修改
        println "cur myName is $myName"
    }
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.gdeer.gdtesthub"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        multiDexEnabled true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

//        ndk {
//            // 选择要添加的对应 cpu 类型的 .so 库。
//            abiFilters 'armeabi'
//        }
        ndk {
            abiFilters 'armeabi', 'x86'
        }

        manifestPlaceholders = [
                JPUSH_PKGNAME: applicationId,
                JPUSH_APPKEY : "84d00a0c2fc5c5bf2edc2b82", //JPush 上注册的包名对应的 Appkey.
                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
        ]
    }
    // 解决 native libraries 不支持cpu的体系结构。允许模拟器调试
    // 依赖 Dynamic module 时，不能写 splits{}
//    splits {
//        abi {
//            enable true
//            reset()
//            include 'x86', 'armeabi-v7a', 'x86_64'
//            universalApk true
//        }
//    }

    // 打 aab 时，splits{} 会被忽略，使用 bundle{} 来配置
    bundle {
        language {
            // 默认是 true
            enableSplit = true
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
    signingConfigs {
        release {
            try {
                v1SigningEnabled true
                v2SigningEnabled false
                File signFile = rootProject.file('sign.properties');
                Properties p = new Properties()
                p.load(new FileInputStream(signFile))

                storeFile file("${project.rootDir}/gdKeyStore")
                storePassword p.keyPassword
                keyAlias p.keyAlias
                keyPassword p.keyPassword
            } catch (ex) {
                throw new Exception("You should define KEYSTORE_PASSWORD and " +
                        "KEY_PASSWORD in sign.properties.")
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }

        debug {
            minifyEnabled false
            signingConfig signingConfigs.release
            debuggable true
            versionNameSuffix 'dev'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    dataBinding {
        enabled = true
    }
    dynamicFeatures = [':dynamicfeature']
}

configurations {
    // 自定义 configuration
    // implementation 会继承 gdConfiguration 声明的依赖
    // 使用 gdConfiguration 与使用 implementation 效果一致，可正常编译
    implementation.extendsFrom(gdConfiguration)


    // compileClasspath 会继承 gdConfiguration2 声明的依赖
    // 但 gdConfiguration2 声明的依赖无法正常使用
    // 因为 android 插件里没有 compileClasspath 这个 configuration
    // 这样的配置只是配置了 compileClasspath、gdConfiguration2 两个全新的 configuration
    compileClasspath.extendsFrom(gdConfiguration2)

    jasper
}

configurations.all {
    resolutionStrategy {
        force 'io.reactivex.rxjava2:rxandroid:2.1.1',
                'io.reactivex.rxjava2:rxjava:2.2.13',
                'android.arch.lifecycle:runtime:1.0.3'
    }
}

dependencies {
    implementation project(":myandroidlib")
    implementation project(":myandroidlib2")

    // 使用自定义 configuration: gdConfiguration
    // mylib 中的类可以在 app 中正常访问
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.slice:slice-builders:1.0.0'
    gdConfiguration project(":mylib")

    // 使用自定义 configuration: gdConfiguration
    // mylib 中的类不能在 app 中访问到
    // gdConfiguration2 project(":mylib")

    // 使用自定义 configuration: jasper
    jasper 'com.github.bumptech.glide:glide:4.9.0'

    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.0-beta4'
    //implementation 'org.litepal.android:java:3.0.0'
    def room_version = "1.1.1"
    implementation 'androidx.room:room-runtime:2.2.5'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    annotationProcessor 'androidx.room:room-compiler:2.2.5'
    // For Kotlin use kapt instead of annotationProcessor
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(':annotation')
    annotationProcessor project(':processor')

    implementation 'com.google.code.gson:gson:2.8.5'
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.5.0'

    implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.2.13'
    implementation 'com.github.akarnokd:rxjava2-extensions:0.20.10'

    implementation 'com.google.android.material:material:1.1.0'

    implementation 'com.jakewharton:butterknife:10.2.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:10.2.1'

    // Enhanced RecyclerView adapter library
    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.46'

    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    // kotlin 协程核心库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutines"
    // kotlin 协程 android 平台库
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutines"
    // kotlin 反射库，解决 fastjson 解析失败问题（default constructor not found）
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"

    implementation 'com.github.bumptech.glide:glide:4.9.0'

    // 解除 P 上的 private api 访问限制
    implementation('me.weishu:free_reflection:2.2.0') {
        // Gradle 4.6 后支持，用于说明用途，可在 dependencies 分析报告中展示
        because "We use it to access the private API on P"
    }

    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.2'

    // 判断设备年份，只支持到 2016
    implementation 'com.facebook.device.yearclass:yearclass:2.1.0'

    implementation 'cn.jiguang.sdk:jpush:3.6.0'  // 此处以JPush 3.6.0 版本为例。
    implementation 'cn.jiguang.sdk:jcore:2.3.4'  // 此处以JCore 2.3.4 版本为例。

    // Dependency for Google Sign-In
    implementation 'com.google.android.gms:play-services-auth:18.0.0'
    // facebook login
    implementation 'com.facebook.android:facebook-login:5.15.3'

    // 手机号合法性判断
    implementation 'com.googlecode.libphonenumber:libphonenumber:8.2.0'

    // fastjson
    implementation 'com.alibaba:fastjson:1.2.70'

    // ARouter
    implementation 'com.alibaba:arouter-api:1.4.1'
    kapt 'com.alibaba:arouter-compiler:1.2.2'

    api "com.google.android.play:core:1.8.0"

    lintChecks project(':rule')
}

task preCompileJasper {
    doLast {
        // 调用 asPath 会去 resolve 声明的依赖，并返回 resolve 后的本地地址
        println("configurations.jasper.asPath: ${configurations.jasper.asPath}")
    }
}

//apply plugin: 'com.geektime.systrace-plugin'
//systrace {
//    enable = true
//    baseMethodMapFile = "${project.buildDir}/systrace_output/Debug.methodmap"
//    blackListFile = "${project.projectDir}/blacklist/blackMethodList.txt"
//}

