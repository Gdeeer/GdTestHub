// 完整
Closure sum = { Integer x, Integer y -> x + y }
// 简化
sumSimple = { x, y -> x + y }


// 最后一个参数是函数类型，lambda 可以放到括号外
// 三个参数
def a3(def x, def y, Closure closure) {
    closure(x, y)
}

a3(1, 2, { x, y -> x + y })
a3(1, 2) { x, y -> x + y }

// 一个参数
def a1(Closure closure) {
    closure(1, 2)
}

a1 { x, y -> x + y }


// lambda 只有一个参数时，可用 it 表示
it = { println(it) }

def itFun(Closure closure) {
    closure(1)
}

itResult = itFun { println(it) }


// lambda 的返回值
retval = {
    1 + 1
    3
}

retval() // 值为 3


// 无用变量的声明
map = [1: "a", 2: "b"]
map.each { _, value -> println(_ + value) }


ints = [1, 2, 3]
sum1 = 0
ints.findAll { it > 0 }.each {
    sum1 += it
}
println(sum1)
