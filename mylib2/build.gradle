apply plugin: 'java-library'
// 提供 mavenDeployer
apply plugin: 'maven'
// 提供 publishing
apply plugin: 'maven-publish'

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
}

sourceCompatibility = "7"
targetCompatibility = "7"

configurations {
    // 创建一个用于声明 artifact 的 configuration
    gdArchives
}

/**
 * 声明一个继承了 Jar 的 task
 * Jar 执行后会在 build/libs 目录下生成一个 jar 包
 * 所以 gdJar 执行后也会
 */
task gdJar(type: Jar) {
    doLast {
        println "gg exec"
    }
}

// 声明一个特定的文件
def someFile = file('src/somefile.txt')

artifacts {
    // 将 gdJar 和 someFile 都看作 artifact，交给 gdArchives 管理
    gdArchives gdJar
    gdArchives someFile
}

group = 'com.gdeer'
archivesBaseName = 'testArtifact'
version = '0.0.1'

/**
 * uploadXXX，是 base plugin 提供的 task，执行后会 upload XXX 管理的 artifact
 */
uploadGdArchives {
    repositories {
        // 上传到本地 maven 仓库
        // maven 插件提供的 mavenDeployer
        mavenDeployer {
            // 会在项目根目录生成文件夹
            def url = 'file:myRepoMaven'
            repository(url: url)
        }

        // 上传到本地 maven 仓库
        maven {
            // 会在 build.gradle 同目录生成文件夹
            url "file:myRepoMaven"
        }

        // 上传到一个普通文件目录
        flatDir {
            dirs "libs"
        }
    }
}

/**
 * maven-publish 中提供的新的发布方式
 */
publishing {
    // 定义要发布的东西
    publications {
        myLibrary(MavenPublication) {
            from components.java
        }
    }

    // 定义要发布的地点
    repositories {
        maven {
            name 'myRepo'
            url "file:myRepoMaven"
        }
    }

    // publications 和 repositories 会组成相应的 task
    // publish「PubName」PublicationTo「RepoName」Repository：
    // publish「MyLibrary」PublicationTo「MyRepo」Repository
}